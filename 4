######################################
##### Discrete Aprroximation
# priors
mu0<-1.9  ; t20<-0.95^2
s20<-.01 ; nu0<-1

# data
y<-c(1.64,1.70,1.72,1.74,1.82,1.82,1.82,1.90,2.08)
n<-length(y) ; mean.y<-mean(y) ; var.y<-var(y)


####
G<-100 ; H<-100

mean.grid<-seq(1.505,2.00,length=G) 
prec.grid<-seq(1.75,175,length=H) 

post.grid<-matrix(nrow=G,ncol=H)

for(g in 1:G) {
  for(h in 1:H) { 
    
    post.grid[g,h]<- dnorm(mean.grid[g], mu0, sqrt(t20)) *
                     dgamma(prec.grid[h], nu0/2, s20*nu0/2 ) *
                     prod( dnorm(y,mean.grid[g], 1/sqrt(prec.grid[h])) )
                  }
                }

## standardize so the probabilities sum to 1
post.grid<-post.grid/sum(post.grid)

## plots
par(mfrow=c(1,3))

image(mean.grid, prec.grid, post.grid, col=gray( (10:0)/10 ), xlab=expression(theta), ylab=expression(tilde(sigma)^2) )

mean.post<- apply(post.grid,1,sum)
plot(mean.grid,mean.post,type="l",xlab=expression(theta), ylab=expression( paste(italic("p("), theta,"|",italic(y[1]),"...",italic(y[n]),")",sep="")))

prec.post<-apply(post.grid,2,sum)
plot(prec.grid,prec.post,type="l",xlab=expression(tilde(sigma)^2), ylab=expression( paste(italic("p("), tilde(sigma)^2,"|",italic(y[1]),"...",italic(y[n]),")",sep=""))) 


#################################
## Gibbs sampling

## set up the storage matrix
S <- 1000
PHI <- matrix(nrow=S,ncol=2)
PHI[1,] <- phi <-c( mean.y, 1/var.y)

### Gibbs sampling
for(s in 2:S) {

# generate a new theta value from its full conditional
mun <-  ( mu0/t20 + n*mean.y*phi[2] ) / ( 1/t20 + n*phi[2] )
t2n <- 1/( 1/t20 + n*phi[2] )
phi[1] <- rnorm(1, mun, sqrt(t2n) )

# generate a new sigma^2 value from its full conditional
nun <- nu0+n
s2n <- (nu0*s20 + (n-1)*var.y + n*(mean.y-phi[1])^2 ) /nun
phi[2] <- rgamma(1, nun/2, nun*s2n/2)

PHI[s,]<-phi         }
###

## plots
par(mfrow=c(1,3))
m1<-5
plot( PHI[1:m1,],type="l",xlim=range(PHI[1:100,1]), ylim=range(PHI[1:100,2]),
       lty=1,col="gray",xlab=expression(theta),ylab=expression(tilde(sigma)^2))
text(  PHI[1:m1,1], PHI[1:m1,2], c(1:m1) )

m1<-15
plot( PHI[1:m1,],type="l",xlim=range(PHI[1:100,1]), ylim=range(PHI[1:100,2]),
       lty=1,col="gray",xlab=expression(theta),ylab=expression(tilde(sigma)^2))
text(  PHI[1:m1,1], PHI[1:m1,2], c(1:m1) )

m1<-100
plot( PHI[1:m1,],type="l",xlim=range(PHI[1:100,1]), ylim=range(PHI[1:100,2]),
       lty=1,col="gray",xlab=expression(theta),ylab=expression(tilde(sigma)^2))
text(  PHI[1:m1,1], PHI[1:m1,2], c(1:m1) )

## some posterior summeries
quantile(PHI[,1],c(.025,.5,.975))
quantile(PHI[,2],c(.025,.5, .975))
quantile(1/sqrt(PHI[,2]),c(.025,.5, .975))




###############################
###### Intro to MCMC diagnostics
mu <- c(-3,0,3)
s2 <- c(.33,.33,.33)
w <- c(.45,.1,.45)

ths <- seq(-5,5,length=100)
plot(ths, w[1]*dnorm(ths,mu[1],sqrt(s2[1])) +
          w[2]*dnorm(ths,mu[2],sqrt(s2[2])) +
          w[3]*dnorm(ths,mu[3],sqrt(s2[3])) ,type="l", ylab="p(theta)", lwd=2)



#### MC Sampling
set.seed(1)
S<-2000
d<-sample(1:3,S, prob=w,replace=TRUE)
th<-rnorm(S,mu[d],sqrt(s2[d]))
THD.MC<-cbind(th,d)


## MC plot
ths <- seq(-6,6,length=1000)

plot(ths, w[1]*dnorm(ths,mu[1],sqrt(s2[1])) +
          w[2]*dnorm(ths,mu[2],sqrt(s2[2])) +
          w[3]*dnorm(ths,mu[3],sqrt(s2[3])) ,type="l" , xlab=expression(theta),ylab=
     expression( paste( italic("p("),theta,")",sep="") ),lwd=2 ,ylim=c(0,.40))
	 
hist(THD.MC[,1], add=TRUE, prob=TRUE, nclass=20, col="gray")

lines(ths, w[1]*dnorm(ths,mu[1],sqrt(s2[1])) +
          w[2]*dnorm(ths,mu[2],sqrt(s2[2])) +
          w[3]*dnorm(ths,mu[3],sqrt(s2[3])),lwd=2 )


#### MCMC sampling
set.seed(1)
th <- 0
THD.MCMC <- NULL
S<-10000

for(s in 1:S) {
d <- sample(1:3 ,1,prob= w*dnorm(th,mu,sqrt(s2))   )
th <- rnorm(1,mu[d],sqrt(s2[d]) )
THD.MCMC <- rbind(THD.MCMC,c(th,d) )
               }



## First 1,000 scans
Smax <- 1000
plot(THD.MCMC[1:Smax,1],xlab="iteration",ylab=expression(theta))

ths <- seq(-6,6,length=1000)
plot(ths, w[1]*dnorm(ths,mu[1],sqrt(s2[1])) +
          w[2]*dnorm(ths,mu[2],sqrt(s2[2])) +
          w[3]*dnorm(ths,mu[3],sqrt(s2[3])) ,type="l" , xlab=expression(theta),
			ylab=expression( paste( italic("p("),theta,")",sep="") ),lwd=2 ,ylim=c(0,.40))

hist(THD.MCMC[1:Smax,1], add=TRUE, prob=TRUE, nclass=20, col="gray")

lines(ths, w[1]*dnorm(ths,mu[1],sqrt(s2[1])) +
          w[2]*dnorm(ths,mu[2],sqrt(s2[2])) +
          w[3]*dnorm(ths,mu[3],sqrt(s2[3])),lwd=2 )


## All 10,000 scans
Smax <- 10000
plot(THD.MCMC[1:Smax,1],xlab="iteration",ylab=expression(theta))

ths <- seq(-6,6,length=1000)
plot(ths, w[1]*dnorm(ths,mu[1],sqrt(s2[1])) +
          w[2]*dnorm(ths,mu[2],sqrt(s2[2])) +
          w[3]*dnorm(ths,mu[3],sqrt(s2[3])) ,type="l" , xlab=expression(theta),
			ylab=expression( paste( italic("p("),theta,")",sep="") ),lwd=2 ,ylim=c(0,.40))

hist(THD.MCMC[1:Smax,1], add=TRUE, prob=TRUE, nclass=20, col="gray")

lines(ths, w[1]*dnorm(ths,mu[1],sqrt(s2[1])) +
          w[2]*dnorm(ths,mu[2],sqrt(s2[2])) +
          w[3]*dnorm(ths,mu[3],sqrt(s2[3])),lwd=2 )


## ACF
acf.theta <- acf(THD.MCMC[,1])
acf.theta
plot(acf.theta)

## Effective number of parameters
library(coda)
effectiveSize(THD.MCMC[,1])



